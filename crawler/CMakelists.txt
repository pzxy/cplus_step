cmake_minimum_required(VERSION 3.22)
# 设置c++标准为c++23
set(CMAKE_CXX_STANDARD 23)
# ON 表示必须支持选定的c++标准
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# 选项表示是否启用编译器的扩展功能，扩展功能会降低可移植性。比如：inline namespace、constexpr、noexcept等C++11标准引入的新特性等；
set(CMAKE_CXX_EXTENSIONS OFF)
# 设置c标准选项
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)
# Makefile文件是否输出详细的编译信息，还是只输出必要信息。默认为ON，即输出详细信息。
set(CMAKE_VERBOSE_MAKEFILE OFF)
# 生成编译命令的JSON文件，可以用于一些代码编辑器的自动补全和语法检查功能。默认根目录下的：compile_commands.json 文件。
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# 设置编译器类型，设置成Debug或者Release，如果没有设置编译类型，则设置成Debug
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

# 设置项目名，并指定编译器
project(XCRAWLER CXX C)
# 寻找静态链接库
SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")

# 没有c++编译器就输出FATAL_ERROR致命错误
if (NOT CMAKE_CXX_COMPILER)
    message(FATAL_ERROR "C++ Compiler not found")
endif()
# 将内置变量CMAKE_BUILD_TYPE 值转换成小写， 放在XBUILD_TYPE中。
string(TOLOWER ${CMAKE_BUILD_TYPE} XBUILD_TYPE)
# 如果 变量XBUILD_TYPE包含rel，就设置XBUILD_TYPE成release
if ("${XBUILD_TYPE}" MATCHES "rel")
    set(XBUILD_TYPE release)
endif()
# CMAKE_SYSTEM_NAME是CMake内置的变量，用于指定操作系统的名称，并转换成小写，就是：android，ios，linux，mac，win这些
string(TOLOWER ${CMAKE_SYSTEM_NAME} XSYSTEM_NAME_LOWERCASE)

# 这些选项变量都是定义的，定义的这些变量可以通过 ${变量名} 的方式来使用。这里它的默认值就是OFF
# 如果要启用某个选项，可以在cmake命令后面加上 -D变量名=ON，比如-DXENABLE_CODE_COVERAGE=ON,或者这里直接将OFF改为ON
option(BUILD_METRICS "build metrics" OFF)# 性能测试是否打开
option(ENABLE_METRICS_DATAOBJECT "Enable metrics dataobject" OFF)# 度量数据对象
option(DISABLE_CORE_SIGNAL_CAPTURE "disable core signal capture" OFF)# core signal capture
option(DISABLE_SIGNAL_CAPTURE "disable all signal capture" OFF)# ON则禁用所有信号捕获

option(XBUILD_TEST "Enable building tests" OFF) # UNIT TEST disabled as default, use build option test to enable it.
# FALSE、OFF、NO、NOTFOUND、0 或空字符串被视为false，其他任何值被视为true
if (XBUILD_TEST)
# FATAL_ERROR：输出错误信息并停止构建。
# SEND_ERROR：输出错误信息，但不停止构建。
# WARNING：输出警告信息。
# AUTHOR_WARNING：输出作者警告信息。
# DEPRECATION：输出弃用警告信息。
# DEBUG：输出调试信息。
# TRACE：输出跟踪信息。
    message(STATUS "ENABLE  building tests ${XBUILD_TEST}")
endif()

#==============================================================================
# In order to set default executable and library binaries' location,
# one solution, by setting
# variables (CMAKE_RUNTIME_OUTPUT_DIRECTORY / CMAKE_LIBRARY_OUTPUT_DIRECTORY)
# or properties (RUNTIME_OUTPUT_DIRECTORY / LIBRARY_OUTPUT_DIRECTORY),
# doesn't work, althrough CMake documentation says it's the recommonded way.
# Fall back to use EXECUTABLE_OUTPUT_PATH / LIBRARY_OUTPUT_PATH.
#==============================================================================
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
#set_property(DIRECTORY PROPERTY RUNTIME_OUTPUT_DIRECTORY ${XCRAWLER_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR/lib})
#set_property(DIRECTORY PROPERTY LIBRARY_OUTPUT_DIRECTORY ${XCRAWLER_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE})
# XCRAWLER_BINARY_DIR : 注意，这是固定写法 工程名字(XCRAWLER)+“_BINARY_DIR” = 当前路径。
set(EXECUTABLE_OUTPUT_PATH ${XCRAWLER_BINARY_DIR}/bin/${CMAKE_SYSTEM_NAME}/)
set(LIBRARY_OUTPUT_PATH ${XCRAWLER_BINARY_DIR}/lib/${CMAKE_SYSTEM_NAME}/)
# LIBRARY_OUTPUT_DIRECTORY是CMake内置的变量之一。它用于指定构建生成库文件（静态库或共享库）的输出目录
# 如果您没有显式地设置这个变量，CMake会默认将静态库和共享库都放置在${CMAKE_BINARY_DIR}/lib/目录下
# 其中 CMAKE_BINARY_DIR是CMake内置的变量之一。它表示运行cmake命令时所在的构建目录.
if ("${LIBRARY_OUTPUT_DIRECTORY}" STREQUAL "")
    set(LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
endif()
# RUNTIME_OUTPUT_DIRECTORY 变量用于指定生成的可执行文件和共享库等运行时输出目录。而 CMAKE_SOURCE_DIR 变量表示项目根目录的路径。
# RUNTIME_OUTPUT_DIRECTORY 默认为 CMAKE_SOURCE_DIR/bin
if ("${RUNTIME_OUTPUT_DIRECTORY}" STREQUAL "")
    set(RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
endif()

message(STATUS "CMAKE_BUILD_TYPE:" ${CMAKE_BUILD_TYPE})
message(STATUS "CMAKE_SYSTEM_NAME:" ${CMAKE_SYSTEM_NAME})
message(STATUS "CMAKE_CXX_COMPILER_ID:" ${CMAKE_CXX_COMPILER_ID})
message(STATUS "XENABLE_CODE_COVERAGE:" ${XENABLE_CODE_COVERAGE})
message(STATUS "XBUILD_TEST:" ${XBUILD_TEST})
message(STATUS "BUILD_METRICS:" ${BUILD_METRICS})
message(STATUS "ADDRESS_SANITIZER:" ${ADDRESS_SANITIZER})
message(STATUS "XCHAIN_FORKED_BY_DEFAULT:" ${XCHAIN_FORKED_BY_DEFAULT})
message(STATUS "DISABLE_CORE_SIGNAL_CAPTURE:" ${DISABLE_CORE_SIGNAL_CAPTURE})
message(STATUS "DISABLE_SIGNAL_CAPTURE:" ${DISABLE_SIGNAL_CAPTURE})
message(STATUS "XUSE_JEMALLOC:" ${XUSE_JEMALLOC})
message(STATUS "LIBRARY_OUTPUT_DIRECTORY:" ${LIBRARY_OUTPUT_DIRECTORY})
message(STATUS "RUNTIME_OUTPUT_DIRECTORY:" ${RUNTIME_OUTPUT_DIRECTORY})

include_directories(SYSTEM src)
include_directories(SYSTEM /opt/homebrew/Cellar/boost/1.82.0_1/include)
add_subdirectory(src)

if (XBUILD_TEST)
    enable_testing()
    include_directories(.)
    add_subdirectory(tests)
endif()